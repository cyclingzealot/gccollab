{
  "name": "elgg-conventional-changelog",
  "version": "0.1.4",
  "description": "Generate a markdown changelog from git commit metadata",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/*.js index.js lib/*.js"
  },
  "files": [
    "index.js",
    "lib/",
    "test/"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Elgg/conventional-changelog.git"
  },
  "keywords": [
    "changelog",
    "elgg"
  ],
  "license": "BSD",
  "contributors": [
    {
      "name": "Brian Ford"
    },
    {
      "name": "Vojta JÃ­na"
    },
    {
      "name": "Andy Joslin"
    },
    {
      "name": "Evan Winslow"
    }
  ],
  "dependencies": {
    "lodash.assign": "~2.4.1",
    "event-stream": "~3.1.0"
  },
  "devDependencies": {
    "chai": "~1.7.2",
    "mocha": "^2.4.5",
    "shelljs": "~0.2.6",
    "sinon": "~1.7.3"
  },
  "readme": "conventional-changelog\n----------------------\n\n```sh\n$ npm install elgg-conventional-changelog\n```\n\nGenerate a changelog from git metadata, using [these commit conventions](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/).  \n\nView [CONVENTIONS.md](https://github.com/Elgg/elgg-conventional-changelog/blob/master/CONVENTIONS.md) for a synposis of the conventions with commit examples.\n\nAdapted from code originally written by @vojtajina, from grunt-conventional-changelog.\n\n## Example output\n- https://github.com/Elgg/elgg-conventional-changelog/blob/master/CHANGELOG.md\n- https://github.com/karma-runner/karma/blob/master/CHANGELOG.md\n\n## Documentation\n\nSimple usage: \n\n```js\nrequire('changelog')({\n  repository: 'https://github.com/joyent/node',\n  version: require('./package.json').version\n}, function(err, log) {\n  console.log('Here is your changelog!', log);\n});\n```\n\n#### `changelog(options, callback)`\n\nBy default, calls the callback with a string containing a changelog from the previous tag to HEAD, using pkg.version, prepended to existing CHANGELOG.md (if it exists).\n\n`callback` is the second parameter, and takes two parameters: `(err, log)`. `log` is a string containing the newly generated changelog, and `err` is either an error or null.\n\n`options` is the first parameter, an object.  The following fields are available:\n\n* `version` `{string}` - The version to be written to the changelog. For example, `{version: require('./package.json').version}`\n\n* `subtitle` `{string}` - A string to display after the version title in the changelog. For example, it will show '## 1.0.0 \"Super Version\"' if codename '\"Super Version\"' is given. By default, it's blank.\n\n* `repository` `{string}` - If this is provided, allows issues and commit hashes to be linked to the actual commit.  Usually used with github repositories.  For example, `{repository: 'http://github.com/joyent/node'}`\n\n* `commitLink` `{function(commitHash)}` - If repository is provided, this function will be used to link to commits. By default, returns a github commit link based on options.repository: `opts.repository + '/commit/' + hash`\n\n* `issueLink` `{function(issueId)}` - If repository is provided, this function will be used to link to issues.  By default, returns a github issue link based on options.repository: `opts.repository + '/issues/' + id`\n\n* `from` `{string}` - Which commit the changelog should start at. By default, uses previous tag, or if no previous tag the first commit.\n\n* `to` `{string}` - Which commit the changelog should end at.  By default, uses HEAD.\n\n* `file` `{string}` - Which file to read the current changelog from and prepend the new changelog's contents to.  By default, uses `'CHANGELOG.md'`.\n\n* `log` `{function()}` - What logging function to use. For example, `{log: grunt.log.ok}`. By default, uses `console.log`.\n\n* `warn` `{function()}` - What warn function to use. For example, `{warn: grunt.log.writeln}`. By default, uses `console.warn`.\n\n* `types` `{Object}` - A map of commit types to section headings.\n  This allows you to customize what sections will be included in the changelog.\n\n  By default, always includes `{fix: 'Bug Fixes', feat: 'Features', breaks: 'Breaking Changes'}`\n  \n  Add new sections: `{perf:'Performance'}`\n  \n  Rename a section: `{feat:'New stuff'}`\n\n  Alias two types to the same section: `{feat: 'Features', feature: 'Features'}`\n\n## License\nBSD\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Elgg/conventional-changelog/issues"
  },
  "homepage": "https://github.com/Elgg/conventional-changelog",
  "_id": "elgg-conventional-changelog@0.1.4",
  "_shasum": "9eea9da38362d8fdf61fd37a05628f8898ed1a3d",
  "_from": "elgg-conventional-changelog@~0.1.2",
  "_resolved": "https://registry.npmjs.org/elgg-conventional-changelog/-/elgg-conventional-changelog-0.1.4.tgz"
}
